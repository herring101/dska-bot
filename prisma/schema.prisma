// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String                 @id
  activeCharacterId   String?
  pressureLevel       Int                    @default(3)
  notificationEnabled Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  tasks               Task[]
  interactions        CharacterInteraction[]
  conversations       Conversation[] // 追加: 会話履歴への参照
}

model Task {
  id            String         @id @default(uuid())
  userId        String
  title         String
  description   String?
  deadline      DateTime?
  priority      String         @default("MEDIUM") // "HIGH", "MEDIUM", "LOW"
  progress      Int            @default(0)
  status        String         @default("PENDING") // "PENDING", "IN_PROGRESS", "COMPLETED"
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  reminders     TaskReminder[]
  user          User           @relation(fields: [userId], references: [id])
  conversations Conversation[] // 追加: 関連する会話への参照

  @@index([userId])
}

model TaskReminder {
  id           String   @id @default(uuid())
  taskId       String
  reminderTime DateTime
  messageType  String
  createdAt    DateTime @default(now())
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model CharacterInteraction {
  id              String   @id @default(uuid())
  userId          String
  characterId     String
  interactionType String
  context         String // JSON形式で保存
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// 新規追加: 会話履歴関連のモデル
model Conversation {
  id                String                @id @default(uuid())
  userId            String
  characterId       String
  startedAt         DateTime              @default(now())
  lastInteractionAt DateTime              @updatedAt
  messages          ConversationMessage[]
  taskId            String? // 関連タスクがある場合
  pressureLevel     Int                   @default(3)
  relationshipScore Int                   @default(0)
  user              User                  @relation(fields: [userId], references: [id])
  task              Task?                 @relation(fields: [taskId], references: [id])

  @@index([userId])
  @@index([taskId])
}

model ConversationMessage {
  id             String       @id @default(uuid())
  conversationId String
  role           String // 'user', 'assistant', 'tool', 'system'
  content        String
  timestamp      DateTime     @default(now())
  toolCallId     String? // Function Call時のID
  toolCalls      String? // Function Call情報 (JSON文字列として格納)
  metadata       String? // 追加のメタデータ (JSON文字列として格納)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}
